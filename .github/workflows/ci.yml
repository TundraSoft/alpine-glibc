name: Docker Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 1 * *'

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      alpine-versions: ${{ steps.alpine-versions.outputs.versions }}
      s6-versions: ${{ steps.s6-versions.outputs.versions }}
    steps:
      - 
        name: Get Alpine Versions
        id: alpine-versions
        run: |
          ALPINE_VERSIONS=$(curl -s https://cz.alpinelinux.org/alpine/ | grep -oP '(?<=v)[^/]+(?=/")' | sort -V | tail -n 3 | tac | jq -Rcn '[inputs]')
          echo "::set-output name=versions::${ALPINE_VERSIONS}"
      - 
        name: Get S6 Versions
        id: s6-versions
        run: |
          VERSIONS=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases | jq -r '.[].tag_name' | grep -vE "rc|alpha" | sort -V | tail -n 3 | tac | sed 's/v//g' | jq -Rcn '[inputs]')
          echo "::set-output name=versions::$VERSIONS"

  docker:
    needs: [get-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # alpine-version: [3.17.1, 3.16.3, 3.16, 3.15.6, 3.15, 3.14.8, 3.14]
        alpine-version: ${{ fromJson(needs.get-versions.outputs.alpine-versions) }}
        s6-version: ${{ fromJson(needs.get-versions.outputs.s6-versions) }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            tundrasoft/alpine-glibc
            ghcr.io/tundrasoft/alpine-glibc
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=latest,enable=${{ matrix.alpine-version == fromJson(needs.get-versions.outputs.alpine-versions)[0] && matrix.s6-version == fromJson(needs.get-versions.outputs.s6-versions)[0] && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=semver,pattern={{major}}.{{minor}},value=${{ matrix.alpine-version }}.0,enable=${{ matrix.s6-version == fromJson(needs.get-versions.outputs.s6-versions)[0] }}
            type=raw,value=${{ matrix.s6-version }},enable=${{ matrix.alpine-version == fromJson(needs.get-versions.outputs.alpine-versions)[0] }}
            type=raw,value=${{ matrix.alpine-version }},suffix=-S6-${{ matrix.s6-version }}
            type=sha,prefix=,suffix=
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_HUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm/v7,darwin/amd64,linux/arm64
          build-args: |
            ALPINE_VERSION=${{ matrix.alpine-version }}
            S6_OVERLAY_VERSION=${{ matrix.s6-version }}
          push: ${{ github.event_name != 'pull_request' }}
          # push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      # -
      #   name: Update Docker Hub Description
      #   uses: peter-evans/dockerhub-description@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PWD }}
      #     repository: tundrasoft/alpine-glibc
          #short-description: ${{ github.event.repository.description }}
          #readme-filepath: ./path/to/README.md
      # -
      #   name: Push notifications to dependent repos
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.PAT_TOKEN }}
      #     script: |
      #       await github.rest.actions.createWorkflowDispatch({
      #         owner: '',
      #         repo: '',
      #         workflow_id: 'ci.yml',
      #         ref: 'master'
      #       })
